diff --git node_modules/@bazel/typescript/internal/tsc_wrapped/compiler_host.js node_modules/@bazel/typescript/internal/tsc_wrapped/compiler_host.js
index 031d9dad1..a7fe9b79b 100644
--- node_modules/@bazel/typescript/internal/tsc_wrapped/compiler_host.js
+++ node_modules/@bazel/typescript/internal/tsc_wrapped/compiler_host.js
@@ -377,10 +377,27 @@ class CompilerHost {
                         `which would be overwritten with ${moduleName} ` +
                         `by Bazel's TypeScript compiler.`);
                 }
-                // Setting the moduleName is equivalent to the original source having a
-                // ///<amd-module name="some/name"/> directive
+
+                // Setting the moduleName is equivalent to the original source having the triple
+                // slash `///<amd-module name="some/name"/>` directive. Also note that we tag
+                // source files for which we assigned a generated module name. This is necessary
+                // so that we can reset the module name when the same source file is loaded from
+                // a cache, but with a different module format where the auto-generated module
+                // names are not desirable. The module name should not leak from previous
+                // compilations through a potential source file cache.
+                sf._hasGeneratedAmdModuleName = true;
                 sf.moduleName = moduleName;
+                return sf;
             }
+
+            // If the loaded source file has a generated amd module name applied from
+            // previous compilations (in worker mode), reset the file module name
+            // as neither the UMD or AMD module format is used (for which we generate
+            // the AMD module names automatically).
+            if (sf._hasGeneratedAmdModuleName) {
+                sf.moduleName = undefined;
+            }
+
             return sf;
         });
     }
