--- index.ts	1970-01-01 01:00:00.000000000 +0100
+++ index.ts	2019-02-28 09:59:37.000000000 +0100
@@ -0,0 +1 @@
+export * from './public_api';
--- lib/translate.pipe.ts	2018-11-14 09:36:25.000000000 +0100
+++ lib/translate.pipe.ts	2019-03-01 08:25:04.000000000 +0100
@@ -1,4 +1,5 @@
-import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';
+import {ChangeDetectorRef, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';
+import {Subscription} from 'rxjs';
 import {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';
 import {equals, isDefined} from './util';
 
@@ -11,9 +12,9 @@
   value: string = '';
   lastKey: string;
   lastParams: any[];
-  onTranslationChange: EventEmitter<TranslationChangeEvent>;
-  onLangChange: EventEmitter<LangChangeEvent>;
-  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;
+  private _onTranslationChangeSub: Subscription;
+  private _onLangChangeSub: Subscription;
+  private _onDefaultLangChangeSub: Subscription;
 
   constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {
   }
@@ -76,8 +77,8 @@
     this._dispose();
 
     // subscribe to onTranslationChange event, in case the translations change
-    if (!this.onTranslationChange) {
-      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {
+    if (this._onTranslationChangeSub == null) {
+      this._onTranslationChangeSub = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {
         if (this.lastKey && event.lang === this.translate.currentLang) {
           this.lastKey = null;
           this.updateValue(query, interpolateParams, event.translations);
@@ -86,8 +87,8 @@
     }
 
     // subscribe to onLangChange event, in case the language changes
-    if (!this.onLangChange) {
-      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {
+    if (this._onLangChangeSub == null) {
+      this._onLangChangeSub = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {
         if (this.lastKey) {
           this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated
           this.updateValue(query, interpolateParams, event.translations);
@@ -96,8 +97,8 @@
     }
 
     // subscribe to onDefaultLangChange event, in case the default language changes
-    if (!this.onDefaultLangChange) {
-      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {
+    if (this._onDefaultLangChangeSub == null) {
+      this._onDefaultLangChangeSub = this.translate.onDefaultLangChange.subscribe(() => {
         if (this.lastKey) {
           this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated
           this.updateValue(query, interpolateParams);
@@ -112,17 +113,14 @@
    * Clean any existing subscription to change events
    */
   private _dispose(): void {
-    if (typeof this.onTranslationChange !== 'undefined') {
-      this.onTranslationChange.unsubscribe();
-      this.onTranslationChange = undefined;
-    }
-    if (typeof this.onLangChange !== 'undefined') {
-      this.onLangChange.unsubscribe();
-      this.onLangChange = undefined;
-    }
-    if (typeof this.onDefaultLangChange !== 'undefined') {
-      this.onDefaultLangChange.unsubscribe();
-      this.onDefaultLangChange = undefined;
+    if (this._onDefaultLangChangeSub != null) {
+      this._onDefaultLangChangeSub.unsubscribe();
+    }
+    if (this._onLangChangeSub != null) {
+      this._onLangChangeSub.unsubscribe();
+    }
+    if (this._onDefaultLangChangeSub != null) {
+      this._onDefaultLangChangeSub.unsubscribe();
     }
   }
 
