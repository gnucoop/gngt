pipeline {
  agent {
    label 'bazel-build-node14'
  }
  environment {
    scmInfo = checkout scm
    gitBranch = scmInfo.GIT_BRANCH.replace("origin/", "")
    cacheParams = getCacheParams()
  }
  stages {
    stage('Get cache') {
      steps {
        getCache(cacheParams)
      }
    }
    stage('Setup') {
      steps {
        restoreCache(cacheParams)
        sh 'cat .jenkins/bazelrc >> .bazelrc'
        sh 'yarn install --frozen-lockfile --non-interactive'
        sh './scripts/circleci/setup_bazel_binary.sh'
      }
    }
    stage('Lint') {
      steps {
        sh 'bazel build //:rollup_globals'
        sh 'yarn -s check-rollup-globals $(bazel info bazel-bin)/rollup_globals.json'
        sh 'bazel build //:entry_points_manifest'
        sh 'yarn -s check-entry-point-setup $(bazel info bazel-bin)/entry_points_manifest.json'
        sh 'yarn -s lint'
        sh 'yarn -s ts-circular-deps:check'
      }
    }
    stage('Build - View Engine') {
      steps {
        sh 'bazel build --build_tag_filters=-docs-package,-release-package --config=view-engine -- src/...'
      }
    }
    stage('Unit tests - View Engine') {
      steps {
        sh 'bazel test --build_tag_filters=-docs-package,-e2e --test_tag_filters=-e2e --config=view-engine --build_tests_only -- src/...'
      }
    }
    stage('Integration tests - View Engine') {
      steps {
        sh 'yarn -s integration-tests:view-engine'
      }
    }
    stage('E2E tests') {
      steps {
        sh 'bazel test src/... --build_tag_filters=e2e --test_tag_filters=e2e'
      }
    }
    stage('Build - Ivy') {
      steps {
        sh 'bazel build --build_tag_filters=-docs-package,-release-package -- src/...'
      }
    }
    stage('API guard tests') {
      steps {
        sh 'bazel test tools/public_api_guard/...'
      }
    }
    stage('Unit tests - Ivy') {
      steps {
        sh 'bazel test --build_tag_filters=-e2e --test_tag_filters=-e2e --build_tests_only -- src/...'
      }
    }
    stage('Integration tests - Ivy') {
      steps {
        sh 'yarn -s integration-tests:partial-ivy'
      }
    }
    stage('Release output') {
      steps {
        sh 'yarn -s build'
        script {
          env.pkg_json_version = sh(script: 'node -pe "require(\\\"./package.json\\\").version"', returnStdout: true).trim()
          env.expected_version = sh(script: 'echo "${pkg_json_version}-sha-$(git rev-parse --short HEAD)"', returnStdout: true).trim()
          sh 'yarn check-release-output ${expected_version}'
        }
        sh 'yarn -s check-tooling-setup'
        sh 'mkdir -p node_modules/@gngt'
        sh 'cp -R dist/releases/* node_modules/@gngt/'
        sh 'rm -f node_modules/__ngcc_entry_points__.json'
        sh 'yarn -s ngcc --error-on-failed-entry-point --no-tsconfig'
        sh 'rm -Rf node_modules/@gngt'
      }
    }
    stage('Save cache') {
      steps {
        saveCache(cacheParams)
      }
    }
  }
}

void getCache(cacheParams) {
  if (cacheParams["hasNodeModulesCache"]) {
    sh "gsutil cp gs://gngt-bazel-remote-cache/${cacheParams["nodeModulesCache"]} ."
  }
  if (cacheParams["hasBazeliskCache"]) {
    sh "gsutil cp gs://gngt-bazel-remote-cache/${cacheParams["bazeliskCache"]} ."
  }
  if (cacheParams["hasBazelRepositoryCache"]) {
    sh "gsutil cp gs://gngt-bazel-remote-cache/${cacheParams["bazelRepositoryCache"]} ."
  }
}

void restoreCache(cacheParams) {
  sh "rm -Rf node_modules ~/.cache/bazelisk ~/bazel_repository_cache"
  if (cacheParams["hasNodeModulesCache"]) {
    try {
      sh "tar xfz ${cacheParams["nodeModulesCache"]}"
    } catch (e) { }
  }
  if (cacheParams["hasBazeliskCache"]) {
    try {
      sh "mkdir -p /home/jenkins/.cache"
      sh "tar xfz ${cacheParams["bazeliskCache"]} -C /home/jenkins/.cache"
    } catch (e) { }
  }
  if (cacheParams["hasBazelRepositoryCache"]) {
    try {
      sh "tar xfz ${cacheParams["bazelRepositoryCache"]} -C /home/jenkins"
    } catch (e) { }
  }
}

void saveCache(cacheParams) {
  if (!cacheParams["hasNodeModulesCache"]) {
    try {
      sh "tar cfz ${cacheParams["nodeModulesCache"]} node_modules"
      sh "gsutil cp ${cacheParams["nodeModulesCache"]} gs://gngt-bazel-remote-cache/"
    } catch (e) { }
  }
  if (!cacheParams["hasBazeliskCache"]) {
    try {
      sh "tar cfz ${cacheParams["bazeliskCache"]} -C /home/jenkins/.cache bazelisk"
      sh "gsutil cp ${cacheParams["bazeliskCache"]} gs://gngt-bazel-remote-cache/"
    } catch (e) { }
  }
  if (!cacheParams["hasBazelRepositoryCache"]) {
    try {
      sh "tar cfz ${cacheParams["bazelRepositoryCache"]} -C /home/jenkins bazel_repository_cache"
      sh "gsutil cp ${cacheParams["bazelRepositoryCache"]} gs://gngt-bazel-remote-cache/"
    } catch (e) { }
  }
}

Map getCacheParams() {
  cacheKey = sh(script: "./scripts/jenkins/cache-key.sh", returnStdout: true).trim()
  nodeModulesCache = "gngt-node-modules-${cacheKey}.tar.gz"
  bazeliskCache = "gngt-bazelisk-${cacheKey}.tar.gz"
  bazelRepositoryCache = "gngt-bazel-repository-${cacheKey}.tar.gz"
  try {
    sh "gsutil stat gs://gngt-bazel-remote-cache/${nodeModulesCache}"
    hasNodeModulesCache = true
  } catch (e) {
    hasNodeModulesCache = false
  }
  try {
    sh "gsutil stat gs://gngt-bazel-remote-cache/${bazeliskCache}"
    hasBazeliskCache = true
  } catch (e) {
    hasBazeliskCache = false
  }
  try {
    sh "gsutil stat gs://gngt-bazel-remote-cache/${bazelRepositoryCache}"
    hasBazelRepositoryCache = true
  } catch (e) {
    hasBazelRepositoryCache = false
  }
  return [
    "hasNodeModulesCache": hasNodeModulesCache,
    "hasBazeliskCache": hasBazeliskCache,
    "hasBazelRepositoryCache": hasBazelRepositoryCache,
    "nodeModulesCache": nodeModulesCache,
    "bazeliskCache": bazeliskCache,
    "bazelRepositoryCache": bazelRepositoryCache
  ]
}
