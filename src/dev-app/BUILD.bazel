load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
load("//tools:defaults.bzl", "ng_module", "ts_library")
load("//tools/dev-server:index.bzl", "dev_server")
load("//tools/esbuild:index.bzl", "esbuild", "esbuild_config")
load("//src/gngt-examples:config.bzl", "ALL_EXAMPLES")
load("//tools/angular:index.bzl", "LINKER_PROCESSED_FW_PACKAGES")

package(default_visibility = ["//visibility:public"])

ts_library(
    name = "dev-app-mocks",
    srcs = [
        "admin-mocks.ts",
    ],
    deps = [
        "//src/core/common",
        "@npm//@angular/core",
        "@npm//@ngrx/store",
        "@npm//rxjs",
    ],
)

ng_module(
    name = "dev-app",
    srcs = [
        "dev-app.ts",
        "main.ts",
        "main-module.ts",
        "routes.ts",
    ],
    deps = [
        "//src/core/translations",
        "//src/dev-app/dev-app",
        "//src/dev-app/example",
        "//src/dev-app/examples-page",
        "//src/dev-app/ion-admin-edit",
        "//src/dev-app/ion-admin-list",
        "//src/dev-app/ion-login",
        "//src/dev-app/mat-admin-edit",
        "//src/dev-app/mat-admin-list",
        "//src/dev-app/mat-calendar",
        "//src/dev-app/mat-login",
        "//src/dev-app/sync",
        "@npm//@angular/cdk",
        "@npm//@angular/material",
        "@npm//@angular/router",
    ],
)

esbuild_config(
    name = "esbuild_config",
    config_file = "esbuild.config.mjs",
    deps = [
        "//tools/esbuild:custom_resolve_esbuild_plugin",
    ],
)

esbuild(
    name = "bundles",
    config = ":esbuild_config",
    entry_points = [":main.ts"] + ["%s:index.ts" % e for e in ALL_EXAMPLES],
    platform = "browser",
    splitting = True,
    # We cannot use `ES2017` or higher as that would result in `async/await` not being downleveled.
    # ZoneJS needs to be able to intercept these as otherwise change detection would not work properly.
    target = "es2016",
    # Note: We add all linker-processed FW packages as dependencies here so that ESBuild will
    # map all framework packages to their linker-processed bundles from `tools/angular`.
    deps = LINKER_PROCESSED_FW_PACKAGES + [
        ":dev-app",
    ],
)

# File group for all static files which are needed to serve the dev-app. These files are
# used in the devserver as runfiles and will be copied into the static web package that can
# be deployed on static hosting services (like firebase).
filegroup(
    name = "dev_app_static_files",
    srcs = [
        "favicon.ico",
        "index.html",
        "@npm//:node_modules/@angular/material/prebuilt-themes/indigo-pink.css",
        "@npm//:node_modules/core-js-bundle/index.js",
        "@npm//:node_modules/rxjs/bundles/rxjs.umd.min.js",
        "@npm//:node_modules/zone.js/dist/zone.js",
    ],
)

dev_server(
    name = "devserver",
    srcs = [
        ":dev_app_static_files",
        "//src:source-files",
    ],
    additional_root_paths = [
        "npm/node_modules",
        # Needed for compatibility with "pkg_web" which always uses the tree
        # artifact output as workspace root.
        "gc_gngt",
    ],
    tags = ["manual"],
    deps = [
        ":bundles",
    ],
)

# Target that builds a static web package of the dev-app. The web package can be
# deployed on static hosting services (such as firebase).
pkg_web(
    name = "web_package",
    srcs = [
        ":bundles",
        ":dev_app_static_files",
    ],
    additional_root_paths = [
        "external/npm",
        "npm/node_modules",
    ],
    tags = ["manual"],
)
